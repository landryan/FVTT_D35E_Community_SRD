{
	"_id": "ntsVqpwD52tRF1nN",
	"_key": "!macros!ntsVqpwD52tRF1nN",
	"actorIds": [
	],
	"author": "VIfT2pClvTXfstmc",
	"command": "//If no tokens are selected this Macro wont work\nif (canvas.tokens.controlled == 0) { ui.notifications.error(\"Please Select one or more Actors\") } else {\n    //Declare Variables\n    var attackArrayCombined = new Array\n    let actors = canvas.tokens.controlled.map(token => {\n        return token.actor\n    });\n    //Do this for each actor selected\n    for (let actor of actors) {\n        //more Variables to be declared (But inside this loop)\n        let myArray = actor.data.items\n        var attackSet = new Set\n        const attackArray = myArray\n            .filter((item) => item.type === 'attack') // filter to only attacks\n            .map((item) => { //map over each item and if it's a duplicate add a blank else? add it to the Array and set \n                const name = `${item.name}`;\n                if (attackSet.has(name)) {\n                    return { name: '' }\n                } else {\n                    attackSet.add(name)\n                    return { name }\n                }\n            }\n            );\n\n        const attackArrayNew = attackArray.filter((item) => item.name !== '') //filter out blanks\n\n        attackArrayCombined.push(attackArrayNew)//Combine the Arrays that were generated for each actor into one place\n    }\n    let flattened = attackArrayCombined.reduce((a, b) => a.concat(b), []); //flatten it out so next command can count\n\n    let counts = flattened.reduce(                                       //count each attack in arrays to compare to the number of actors selected later\n        (map, { name }) => map.set(name, (map.get(name) || 0) + 1), new Map()\n    );\n    let found = attackArrayCombined[0].filter(({ name }) => counts.get(name) === attackArrayCombined.length); //Compare the number of Duplicates of each attack to the Number of Actors selected (to make sure they all have the attack)\n    if (found == 0) {\n        ui.notifications.error(\"Either Selected Actor has no Attacks or Selected Actors do not have common attacks, Cannot Batch Roll\")//if actors have no attacks in common then give an error and stop\n    } else { //if they do...\n        var data = { attacks: found } //so it makes sense to handlebars\n        const contentRaw = `\n      <form>\n    <div class=\"form-group\" >\n    <label id='attackDataHere'>Available Attacks:</label>   \n    <select id=\"choices\" name=\"choices\">\n           {{#each attacks}}<option value=\"{{name}}\">{{name}}</option>{{/each}}\n          </select>\n        </div>\n  <em>Select attack that you want to roll for selected tokens. by default will roll first valid attack on respective character sheet.</em>\n      </form>\n    `//HTML template so that we can have a drop down\n        const template = Handlebars.compile(contentRaw);//give the html template to handlebars\n        const content = template(data); //use our attack data from before to insert into template\n        let selectedOption; //declaring another variable :D\n        //Make a dialog and make it do things and stuff\n        let dialog = new Dialog({\n            title: \"Attack Selection\",\n            content: content, //this is where that HTML ends up\n            //what do you want the buttons to do?\n            buttons: {\n                yes: {\n                    icon: '<i class=\"fas fa-dice\"></i>',\n                    label: \"Attack\",\n                    callback: () => {\n                        selectedOption = document.getElementById('choices').value;\n                    },\n                },\n                no: {\n                    icon: '<i class=\"fas fa-times\"></i>',\n                    label: \"Cancel\",\n                }\n            },\n            default: \"yes\", //Default point to yes\n            close: () => {\n                if (selectedOption) {\n                    switch (selectedOption) {\n                        default: //the default option for the Dialog, it was easy to put the code here so i did\n                            let actors = canvas.tokens.controlled.map(token => { //gotta declare the actors again\n                                return token.actor\n                            })\n                            for (let actor of actors) { //another for loop for each of the actors so they each do their attack\n                                var itemFound = actor.items.find(item => item.name === `${selectedOption}` && item.type === \"attack\") // ${selectedOption} is the name of the attack(sometimes shared with weapons) \n                                //so we don't want any weapons from your character sheet only the attacks they produce\n                                let item = itemFound.useAttack({ skipDialog: true }) // Skip dialog will use the attack without making a bunch of other pop ups \n                                item\n                            }\n                    }\n                }\n            }\n        }\n        );\n        dialog.render(true); //RENDER!!!!\n    }\n}",
	"img": "icons/svg/sword.svg",
	"name": "Mass Token Attack",
	"permission": {
		"VIfT2pClvTXfstmc": 3,
		"default": 0
	},
	"scope": "global",
	"type": "script"
}
