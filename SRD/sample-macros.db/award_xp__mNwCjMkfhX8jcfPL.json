{
	"_id": "mNwCjMkfhX8jcfPL",
	"_key": "!macros!mNwCjMkfhX8jcfPL",
	"author": "VIfT2pClvTXfstmc",
	"command": "//This Macro distributed EXP awarted by monsters that are selected by Target Tools to party members that are places on map. (Party members - Characters that have Party Member checked)\n//Determine Actors grab their info for later\n\nlet users = game.users.entries\nlet avgLevel = 0\nlet actorCount = 0\nconst tokens = [...canvas.tokens.placeables];\nvar actorArray = new Array\n//For each token on the Cavnas push ONLY party members to Array\ntokens.forEach(token => {\n\n    if(token?.actor?.data?.data?.isPartyMember){\n        actorArray.push({id:token.actor.id,name:token.actor.data.name,level:token.actor.data.data.details.level.value,image:token.actor.data.img,classes:token.actor.data.items.filter(item => item.type == \"class\").filter(item => item.data.classType == \"base\")})\n//count the ammount of players (for the exp split later) and the Average party level\nactorCount ++\navgLevel +=token.actor.data.data.details.level.value}\n\n});\nconsole.log(actorArray)\n//Determine EXP\n//Targeted defeated Creatures\nlet targets = game.user.targets\nlet expTotal = 0\nfor (let target of targets) {\nlet partyLevelReal = avgLevel/actorCount\npartyLevelReal = Math.max(partyLevelReal,3)\nlet CR = target.actor.data.data.details.cr\nif(CR == undefined){CR = target.actor.data.data.details.level.value}\n\n\nlet partyLevel = partyLevelReal-CR\n\npartyLevel = partyLevelReal-CR\n\n\n\n//if Party is above CR\nif(partyLevel>0){\n\nlet i = partyLevelReal-CR\nlet a = 1\nlet exp = 300*(CR)\nwhile(i>0){\nexp = exp-((100/(Math.pow(2,Math.ceil((a-1)/2))))*CR)\n\ni--\na++\n}\n\n\nexp = Math.ceil(exp*partyLevelReal/CR)\nexp = Math.min(exp,300*CR)\n\n\nexpTotal = expTotal+exp\npartyLevelReal++\n}else{\n//if Party is at or below the CR\n\nlet i = partyLevelReal-CR\nlet a = 1\nlet exp = 300*(CR) //Base EXP\nwhile(i<0){\nexp = exp+(Math.pow(2,Math.ceil((a/2)))*75)*CR\n\ni++\na++\n}\n\n//Converted Exp\nexp = Math.ceil(exp*partyLevelReal/CR);\n\n//All of the EXP from all of the Creatures combined\nexpTotal = expTotal+exp\n\n}\n}\n\n\n\n//Determine the Monsters grab their info for later\n\nlet monsterList = new Array\nlet monsterSet = new Set\nlet monsterSet2 = new Set\nvar i;\ntargets = game.user.targets;\nfor (let target of targets) {\nmonsterList.push({id:target.actor.id,name:target.actor.name,cr:target.actor.data.data.details.cr,image:target.actor.data.img})\nif(!monsterSet2.has(target.actor.id)){\n\nmonsterSet2.add(target.actor.id)\nlet CR = target.actor.data.data.details.cr\nif(CR == undefined){monsterSet.add({id:target.actor.id,name:target.actor.name,cr:target.actor.data.data.details.level.value,image:target.actor.data.img})}\nelse\n{monsterSet.add({id:target.actor.id,name:target.actor.name,cr:target.actor.data.data.details.cr,image:target.actor.data.img})}\n}\n\n}\n\n\n\n\n\n//Count Duplicates for the Display\n    let flattened = monsterList.reduce((a, b) => a.concat(b), []); //flatten it out so next command can count\n\n\n   \n    let counts = flattened.reduce(                                       //count each attack in arrays to compare to the number of actors selected later\n        (map, { id }) => map.set(id, (map.get(id) || 0) + 1), new Map()\n    );\n\n\n//shove it all together Monsters name and CR + How many we found\nlet countArray = new Array\nfor (let [key, value] of counts) {\n\nfor(i of monsterSet){\nif(i.id===key){\ncountArray.push({id:i.id,count:value,name:i.name,cr:i.cr,image:i.image})\nconsole.log(countArray)\n\n}\n}\n}\n//Grab the data of what to show the Dialog box\nvar expEach = Math.floor(expTotal/actorCount)\n\nvar data = {targets:countArray,actors:actorArray,exp:expTotal,count:expEach} \n\n\n//HTML template\n    const contentRaw = `\n      <form>\n      <script type=\"text/javascript\">\n      function giveExp(exp,actorId){\nlet tokenExp = game.actors.get(actorId)\n\ntokenExp.update({'data.details.xp.value':Number(tokenExp._data.data.details.xp.value) + Number(exp)})\n\n};\n      </script>\n<style>\n.flex-container {\n    display: flex;\n    flex-flow: nowrap;\n    height:32px;\n  }\n \n  .flex-container > div {\n    width: 144px;\n    margin: 2px;\n    text-align: center;\n    line-height: 32px;\n    font-size: 14px;\n    text-overflow: ellipsis;\n    height:32px;\n  }\n  .flex-container > div.double-wide {\n    width: 288px;\n    margin: 4px;\n    text-align: center;\n    line-height: 32px;\n    font-size: 14px;\n  }\n</style>\n    <label>Defeated Creatures</label>\n<div></div>\n\n    <div class=\"flex-container\">\n       <p>(only targeted monsters will show up)</p>\n</div>\n    <fieldset>\n    <div>\n    <div>\n\n    {{#each targets}}\n    <div class=\"flex-container\">\n\n    <img src=\"{{image}}\" width=\"32\" height=\"32\">\n    \n    <div><em>x{{count}}</em></div>\n    <div class=\"double-wide\"> {{name}}</div>\n    <div></div>\n    <div> CR:{{cr}}</div>\n    \n    \n    </div>\n    {{/each}}\n\n    </div>\n    </div>\n\n    </fieldset>\n<label>Party Characters</label>\n    <fieldset>\n           {{#each actors}}\n           <div class=\"flex-container\">\n           <img src=\"{{image}}\" width=\"32\" height=\"32\">\n           <div class=\"double-wide\"><em> {{name}}</em></div>\n           <div><em> Level:{{level}}</em></div>         \n           <div><button type=\"button\" id= {{id}} onclick=\"this.disabled=true;giveExp({{../count}},'{{id}}')\">Award Exp</button></div>\n           </div>\n           {{/each}}\n\n    </fieldset>\n<p>total exp: {{exp}}<p>\n<p>exp each: {{count}}</p>\n\n      </form>\n    `\n    //process it\n    const template = Handlebars.compile(contentRaw);//make template ready for the data we prepped\n    const content = template(data); //The Template proccessed, with all the data ready for Dialog box\n    console.log(content)\n    let found = monsterList.filter(({ name }) => counts.get(name) === monsterList.length); //Compare the number of Duplicates of each attack to the Number of Actors selected (to make sure they all have the attack)\n//Dialog box stuff\nlet d = new Dialog({\n\n    title: \"EXP Calculation\",\n    content: content, //Where the Proccessed template ends up\n    buttons: {\n\n     two: {\n      icon: '<i class=\"fas fa-times\"></i>',\n      label: \"Close\",\n      callback: () => console.log(\"Chose Two\")\n     }\n    },\n    default: \"two\",\n    render: html => console.log(\"Register interactivity in the rendered dialog\"),\n    close: html => console.log(\"This always is logged no matter which option is chosen\")\n    \n   },({width:800}));\n\n   d.render(true);",
	"folder": null,
	"img": "icons/svg/book.svg",
	"name": "Award XP",
	"permission": {
		"VIfT2pClvTXfstmc": 3,
		"default": 0
	},
	"scope": "global",
	"type": "script"
}
